  /* single linked list */
#include<iostream>
//#include<conio.h>
#include<cstdlib>
using namespace std;
class list
{
        struct node
        {
                int data;
                node *link;
        }*p;
public:
        void inslast(int);//test1 to develop
        void insbeg(int);//test2 to develop
        void insnext(int,int);//test3 to develop
        void delelement(int);//test4 to develop
        void delbeg();//test5 to develop
        void dellast();//test6 t develop
        void disp();
        int seek(int);
        list(){p=NULL;}
        ~list();
};

/*void list::inslast(int x)
{
        node *q,*t;
        if(p==NULL)
        {
                p=new node;
                p->data=x;
                p->link=NULL;
        }
        else
        {
                q=p;
                while(q->link!=NULL)
                        q=q->link;
                t=new node;
                t->data=x;
                t->link=NULL;
 t->link=NULL;
                q->link=t;
        }
        cout<<"\n\nInserted successfully at the end..";
        disp();
}
*/
*/void list:: insbeg(int x)
{
        node *q;
        q=p;
        p=new node;
        p->data=x;
        p->link=q;
        cout<<"\n\nInserted successfully at the begining..";
        disp();
}
*/

/*void list::delelement(int x)
{
        node *q,*r;
        q=p;
        if(q->data==x)
        {
                p=q->link;
                delete q;
                return;
        }
        r=q;
        while(q!=NULL)
        {
                if(q->data==x)
                {
                        r->link=q->link;
                        delete q;
                        return;
                }
                r=q;
                q=q->link;
        }
        cout<<"\n\nElement you entered   "<<x<<"    is not found..";
}
*/
/*void list:: delbeg()
{
        cout<<"\n\nThe list before deletion:";
        disp();
        node *q;
        q=p;
        if(q==NULL)
        {
                cout<<"\n\nNo data is present..";
                return;
        }
        p=q->link;
        delete q;
        return;
}
*/

/*void list:: dellast()
{
        cout<<"\n\nThe list before deletion:";
        disp();
        node *q,*t;
        q=p;
        if(q==NULL)
        {
                cout<<"\n\nThere is no data in the list..";
                return;
        }
        if(q->link==NULL)
        {
                p=q->link;
                delete q;
                return;
        }

        while(q->link->link!=NULL)
                q=q->link;
        q->link=NULL;
        return;
}
}
*/
list::~list()
{
        node *q;
        if(p==NULL) return;
        while(p!=NULL)
        {
                q=p->link;
                delete p;
                p=q;
        }
}

void list::disp()
{
        node *q;
        q=p;
        if(q==NULL)
        {
                cout<<"\n\nNo data is in the list..";
                return;
        }
        cout<<"\n\nThe items present in the list are \n";
        while(q!=NULL)
        {
                cout<<q->data<<"\n";
                q=q->link;
        }
}

void list :: insnext(int value,int position)
{
        node *temp,*temp1;
        temp=p;
        if(temp1==NULL)
        {
                temp1= new node;
                temp1->data=value;
                temp1->link=NULL;
                p=temp1;
                return;
 }
        for(int i=0;((i<position)&&(temp->link!=NULL)) ;i++)
        {
                if(i==(position-1))
                {
                        temp1= new node;
                        temp1->data= value;
                        temp1->link=temp->link;
                        temp->link=temp1;
                }
                temp=temp->link;
        }
        cout<<"\n\nInserted successfully at "<<position;
        disp();
}


int list::seek(int value)
{
        node *temp;
        temp=p;
        int position=0;
        while(temp!=NULL)
        {
                if(temp->data==value)
                        return position+1;
                else
                {
                        temp=temp->link;
                        position=position+1;
                }
        }
        cout<<"\n\nElement "<<value<<" not found";
        return 0;
}

int main()
{
list l;
int ch,v,p,ps;
do
{
//      clrscr();
        cout<<"\n\nOperations on List..";
        cout<<"\n\n1.Insertion\n2.Deletion\n3.Display\n4.Seek\n5.Exit";
        cout<<"\n\nEnter ur Option :";
        cin>>ch;

        switch(ch)
        {
        case 1:
                //clrscr();
                cout<<"INSERTION";
                cout<<"\n\n1.Insertion at begining\n2.Insertion at the end";
                cout<<"\n3.Insertion between two Nodes";
                cout<<"\n\nEnter ur choice:";
                cin>>ps;
                cout<<"Enter the value to insert:";
                cin>>v;
                switch(ps)
                {
                        case 1:
                                l.insbeg(v);
                                break;
                        case 2:
                                l.inslast(v);
                                break;
                        case 3:
                                cout<<"\nEnter the position to insert the value:";
                                cin>>p;
                                l.insnext(v,p);
                                break;

                        default:
                                cout<<"\nThe choice is invalid";
                                break;
                          break;
                }
        break;

        case 2:
                //clrscr();
                cout<<"\n1.Delete the first element\n2.Delete the last element";
                cout<<"\n3.Enter the element to delete from the list";
                cout<<"\n\nEnter ur choice:";
                cin>>ps;
                switch(ps)
                {
                        case 1:
                                l.delbeg();
                                cout<<"\nThe list after deletion:";
                                l.disp();
                                break;
                        case 2:
                                l.dellast();
                                cout<<"\nThe list after deletion:";
                                l.disp();
                                break;
                        case 3:
                                l.disp();
                                cout<<"\nEnter the element to delete :  ";
                                cin>>v;
                                l.delelement(v);
                                cout<<"\nThe list after deletion:";
                                l.disp();
                                break;

                        default:
                                cout<<"\nThe option is invalid...";
                                break;
                }
        break;

        case 3:
                //clrscr();
                l.disp();
                break;
 case 4:
                //clrscr();
                l.disp();
                cout<<"\nEnter the element to search:";
                cin>>v;
                cout<<"\nThe position of the element "<< v<<"  is "<<l.seek(v);
        //      getch();
                break;

        case 5:
                exit(1);

        default:
                cout<<"\nThe option is invalid...";
                break;
        }
        //getch();
}while(ch!=5);
//getch();
return 0;
}

